{"version":3,"sources":["components/card/card-component.js","components/cards-list/cards-list-component.jsx","components/search-box/search-box-component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","character","id","attributes","name","replace","names","ja_jp","CardLists","characters","map","key","SearchBox","placeholder","handleChange","onChange","type","App","e","setState","searchField","target","value","state","fetch","then","response","json","characterJson","data","this","filteredCharacters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAEaA,G,YAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,iBAAiBC,IAAG,mDAA8CH,EAAMI,UAAUC,GAA9D,mBAC7B,4BAAKL,EAAMI,UAAUE,WAAWC,KAAKC,QAAQ,IAAK,KAClD,2BAAIR,EAAMI,UAAUE,WAAWG,MAAMC,UCHhCC,EAAY,SAAAX,GAAK,OAC1B,yBAAKC,UAAU,aACXD,EAAMY,WAAWC,KAAI,SAACT,GAAD,OACjB,kBAAC,EAAD,CAAMU,IAAKV,EAAUC,GAAID,UAAWA,SCHnCW,G,YAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACIhB,UAAU,SACViB,SAAUD,EACVE,KAAK,SAASH,YAAaA,MCqCpBI,E,kDApCb,aAAe,IAAD,8BACZ,gBAYFH,aAAe,SAAAI,GAAC,OAAI,EAAKC,SACvB,CAAEC,YAAaF,EAAEG,OAAOC,SAZxB,EAAKC,MAAQ,CACXd,WAAY,GACZW,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,kFACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAa,OAAI,EAAKT,SAAS,CAAEV,WAAYmB,EAAcC,Y,+BAK3D,IAAD,EAC6BC,KAAKP,MAAjCH,EADD,EACCA,YACJW,EAFG,EACctB,WACeuB,QAAO,SAAC/B,GAC1C,OAAOA,EAAUE,WAAWC,KAAK6B,cAAcC,SAASd,EAAYa,kBAEtE,OACE,yBAAKnC,UAAU,OACb,4BAAQA,UAAU,cAChB,wCACA,kBAAC,EAAD,CACEe,YAAY,kBACZC,aAAcgB,KAAKhB,eAErB,kBAAC,EAAD,CAAWL,WAAYsB,U,GA9BfI,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b5c5d074.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card-styles.css';\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"character_name\" src={`https://media.kitsu.io/characters/images/${props.character.id}/original.jpg`} />\r\n        <h2>{props.character.attributes.name.replace(',', '')}</h2>\r\n        <p>{props.character.attributes.names.ja_jp}</p>\r\n    </div>\r\n)\r\n\r\n","import React from 'react';\r\nimport './cards-list.style.css';\r\nimport { Card } from '../card/card-component';\r\nexport const CardLists = props => (\r\n    <div className=\"cardlists\">{\r\n        props.characters.map((character) => (\r\n            <Card key={character.id} character={character} />\r\n        )\r\n        )\r\n    }\r\n    </div>\r\n);","import React from 'react';\r\nimport './search-box-styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input\r\n        className=\"search\"\r\n        onChange={handleChange}\r\n        type=\"search\" placeholder={placeholder} />\r\n\r\n)","import React, {\n  Component\n} from 'react';\nimport { CardLists } from './components/cards-list/cards-list-component'\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box-component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      characters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://kitsu.io/api/edge/characters?page[limit]=20&page[offset]=20&sort=malId')\n      .then(response => response.json())\n      .then(characterJson => this.setState({ characters: characterJson.data }));\n  }\n  handleChange = e => this.setState(\n    { searchField: e.target.value }\n  )\n  render() {\n    const { searchField, characters } = this.state;\n    let filteredCharacters = characters.filter((character) => {\n      return character.attributes.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>AniChara</h1>\n          <SearchBox\n            placeholder=\"Enter Character\"\n            handleChange={this.handleChange}\n          />\n          <CardLists characters={filteredCharacters} />\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}